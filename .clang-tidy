---
# Configure clang-tidy for this project.

# Here is an explanation for why some of the checks are disabled:
#
#  -google-readability-namespace-comments: the *_CLIENT_NS is a macro, and
#      clang-tidy fails to match it against the initial value.
#
#  -modernize-use-trailing-return-type: clang-tidy recommends using
#      `auto Foo() -> std::string { return ...; }`, we think the code is less
#      readable in this form.
#
#  -modernize-return-braced-init-list: We think removing typenames and using
#      only braced-init can hurt readability.
#
#  -performance-move-const-arg: This warning requires the developer to
#      know/care more about the implementation details of types/functions than
#      should be necessary. For example, `A a; F(std::move(a));` will trigger a
#      warning IFF `A` is a trivial type (and therefore the move is
#      meaningless). It would also warn if `F` accepts by `const&`, which is
#      another detail that the caller need not care about.
#
#  -readability-redundant-declaration: A friend declaration inside a class
#      counts as a declaration, so if we also declare that friend outside the
#      class in order to document it as part of the public API, that will
#      trigger a redundant declaration warning from this check.
#
Checks: >
  -*,
  bugprone-*,
  cert-*
  concurrency-*
  google-*,
  misc-*,
  modernize-*,
  mpi-*,
  openmp-use-default-none,
  performance-*,
  portability-*,
  readability-*,
  fuchsia-multiple-inheritance,
  hicpp-exception-baseclass,
  hicpp-multiway-paths-covered,
  hicpp-no-assembler,

  -google-readability-braces-around-statements,
  -google-readability-namespace-comments,
  -google-runtime-references,
  -misc-non-private-member-variables-in-classes,
  -modernize-return-braced-init-list,
  -performance-move-const-arg,
  -readability-named-parameter,
  -modernize-use-trailing-return-type,
  -readability-braces-around-statements,
  -readability-redundant-declaration,
  -modernize-avoid-c-arrays,
  -readability-identifier-length
# Turn all the warnings from the checks above into errors.
# WarningsAsErrors: "*"

# TODO(#205) - Enable clang-tidy checks in our headers.
#    HeaderFilterRegex: "google/cloud/.*"

# 命名规范：
# CamelCase（大驼峰命名法）
# camelBack（小驼峰命名法）
# lower_case（小写命名法）

# 命名规范记录
# 1. 命名空间namespcase:lower_space
# 2. class/struct的名称：CamelCase
# 3. template参数:CamelCase
# 4. 普通变量：camelBack
# 5. class成员变量: 带有m前缀的CamleCase，例如 int mValue;
# 6. 函数/方法：camelBack
# 7. 宏定义: UPPER_CASE
# 8. 枚举/常量/constexpr/static常量：带有k前缀的CamelCase,例如 enum{ kFirst,kSecon}
# 9. 

CheckOptions:
  - { key: readability-identifier-naming.NamespaceCase,          value: lower_case }
  - { key: readability-identifier-naming.ClassCase,              value: CamelCase  }
  - { key: readability-identifier-naming.StructCase,             value: CamelCase  }
  - { key: readability-identifier-naming.TemplateParameterCase,  value: CamelCase  }
  # - { key: readability-identifier-naming.FunctionCase,           value: aNy_CasE  }
  - { key: readability-identifier-naming.VariableCase,           value: camelBack }
  # - { key: readability-identifier-naming.MemberPrefix,           value: m         }
  # - { key: readability-identifier-naming.MemberCase,             value: CamelCase }
  - { key: readability-identifier-naming.PrivateMemberPrefix,      value: m         }
  - { key: readability-identifier-naming.ClassMemberCase,        value: CamelCase }
  - { key: readability-identifier-naming.FunctionCase,           value: camelBack }
  - { key: readability-identifier-naming.ClassMethodCase,        value: camelBack }
  - { key: readability-identifier-naming.MethodCase,             value: camelBack }


  # - { key: readability-identifier-naming.ClassMemberSuffix,      value: _          }
  # - { key: readability-identifier-naming.PrivateMemberSuffix,    value: _          }
  # - { key: readability-identifier-naming.ProtectedMemberSuffix,  value: _          }
  - { key: readability-identifier-naming.MacroDefinitionCase,    value: UPPER_CASE }
  - { key: readability-identifier-naming.EnumConstantCase,         value: CamelCase }
  - { key: readability-identifier-naming.EnumConstantPrefix,       value: k         }
  - { key: readability-identifier-naming.ConstexprVariableCase,    value: CamelCase }
  - { key: readability-identifier-naming.ConstexprVariablePrefix,  value: k         }
  - { key: readability-identifier-naming.GlobalConstantCase,       value: CamelCase }
  - { key: readability-identifier-naming.GlobalConstantPrefix,     value: k         }
  - { key: readability-identifier-naming.MemberConstantCase,       value: CamelCase }
  - { key: readability-identifier-naming.MemberConstantPrefix,     value: k         }
  - { key: readability-identifier-naming.StaticConstantCase,       value: CamelCase }
  - { key: readability-identifier-naming.StaticConstantPrefix,     value: k         }
  - { key: readability-implicit-bool-conversion.AllowIntegerConditions,  value: 1   }
  - { key: readability-implicit-bool-conversion.AllowPointerConditions,  value: 1   }